[{"/home/niteesh/Desktop/xopa/src/reportWebVitals.js":"1","/home/niteesh/Desktop/xopa/src/Dashboard.js":"2","/home/niteesh/Desktop/xopa/src/Signin.js":"3","/home/niteesh/Desktop/xopa/src/Register.js":"4","/home/niteesh/Desktop/xopa/src/PrivateRoute.js":"5","/home/niteesh/Desktop/xopa/src/App.js":"6","/home/niteesh/Desktop/xopa/src/index.js":"7","/home/niteesh/Desktop/xopa/src/Information.js":"8"},{"size":362,"mtime":1606390872213,"results":"9","hashOfConfig":"10"},{"size":8442,"mtime":1606675255110,"results":"11","hashOfConfig":"10"},{"size":2250,"mtime":1606671619233,"results":"12","hashOfConfig":"10"},{"size":2236,"mtime":1606671739602,"results":"13","hashOfConfig":"10"},{"size":557,"mtime":1606393117451,"results":"14","hashOfConfig":"10"},{"size":889,"mtime":1606671306319,"results":"15","hashOfConfig":"10"},{"size":601,"mtime":1606562712107,"results":"16","hashOfConfig":"10"},{"size":639,"mtime":1606631590018,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"15wz0ki",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/niteesh/Desktop/xopa/src/reportWebVitals.js",[],["41","42"],"/home/niteesh/Desktop/xopa/src/Dashboard.js",["43"],"import React, { useState, useEffect } from \"react\";\nimport {\n  TextInput,\n  Header,\n  HeaderName,\n  HeaderGlobalAction,\n  HeaderGlobalBar,\n  ModalHeader,\n  ModalBody,\n  Form,\n  Button,\n  DataTable,\n  Table,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableToolbar,\n  TableBatchAction,\n  TableBatchActions,\n  TableSelectRow,\n  TableSelectAll,\n  TableToolbarSearch,\n  TableToolbarContent,\n  ComposedModal,\n  Loading,\n} from \"carbon-components-react\";\nimport \"./Dashboard.scss\";\n\nconst HEADERS = [\n  {\n    key: \"name\",\n    header: \"Name\",\n  },\n  {\n    key: \"email\",\n    header: \"Email\",\n  },\n  {\n    key: \"phone\",\n    header: \"Phone\",\n  },\n  {\n    key: \"city\",\n    header: \"City\",\n  },\n  {\n    key: \"country\",\n    header: \"Country\",\n  },\n];\n\nfunction Dashboard({ history, setLoggedIn }) {\n  const [rows, setRows] = useState([]);\n  const [headers, setHeaders] = useState(HEADERS);\n  const [searchInput, setSearchInput] = useState(null);\n  const [open, setOpen] = useState(false);\n\n  const [firstName, setFirstName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [searchedRows, setSearchedRows] = useState([]);\n\n  const rowLength = rows.length;\n\n  useEffect(() => {\n    fetch(\"https://5fc37639e5c28f0016f54a7e.mockapi.io/info\")\n      .then((resp) => resp.json())\n      .then((result) => {\n        result.forEach((obj) => (obj.id = parseInt(obj.id)));\n        setIsLoading(false);\n        setRows(result);\n      });\n  }, []);\n\n  const batchActionClick = (selectedRows) => {\n    var temp = rows;\n    selectedRows.forEach((selection) => {\n      temp = temp.filter((row) => row.id !== selection.id);\n    });\n\n    setRows(temp);\n  };\n\n  const onInputChange = (e) => {\n    setSearchInput(e.target.value);\n\n    if (searchInput) {\n      let searchKeyword = searchInput.toLowerCase();\n\n      let filteredRows = rows.filter(\n        (data) =>\n          data.name.toLowerCase().includes(searchKeyword) ||\n          data.email.toLowerCase().includes(searchKeyword) ||\n          data.phone.toLowerCase().includes(searchKeyword) ||\n          data.city.toLowerCase().includes(searchKeyword) ||\n          data.country.toLowerCase().includes(searchKeyword)\n      );\n      setSearchedRows(filteredRows);\n    } else {\n      setSearchedRows([]);\n    }\n  };\n\n  const handleOnRowAdd = (event) => {\n    event.preventDefault();\n\n    const newRow = {\n      id: rowLength + 1,\n      name: firstName,\n      email: email,\n      phone: phone,\n      city: city,\n      country: country,\n    };\n    setRows([...rows, newRow]);\n    setFirstName(\"\");\n    setEmail(\"\");\n    setPhone(\"\");\n    setCity(\"\");\n    setCountry(\"\");\n    setOpen(false);\n  };\n\n  const handlelogout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"currentUser\");\n    setLoggedIn(false);\n\n    history.push(\"/\");\n  };\n\n  return (\n    <div>\n      <Header aria-label=\"XOPA Platform Name\">\n        <HeaderName href=\"#\" prefix=\"XOPA\"></HeaderName>\n        <HeaderGlobalBar>\n          <HeaderGlobalAction aria-label=\"Log out\" onClick={handlelogout}>\n            LOG OUT\n          </HeaderGlobalAction>\n        </HeaderGlobalBar>\n      </Header>\n      {!isLoading ? (\n        <div className=\"table\">\n          <DataTable\n            rows={searchInput ? searchedRows : rows}\n            headers={headers}\n            isSortable\n          >\n            {({\n              rows,\n              headers,\n              getHeaderProps,\n              getRowProps,\n              getSelectionProps,\n              getBatchActionProps,\n              selectedRows,\n              getTableProps,\n            }) => (\n              <TableContainer title=\"DataTable\">\n                <TableToolbar>\n                  <TableBatchActions {...getBatchActionProps()}>\n                    <TableBatchAction\n                      tabIndex={\n                        getBatchActionProps().shouldShowBatchActions ? 0 : -1\n                      }\n                      onClick={() => {\n                        batchActionClick(selectedRows);\n                      }}\n                    >\n                      Delete\n                    </TableBatchAction>\n                  </TableBatchActions>\n                  <TableToolbarContent>\n                    <TableToolbarSearch\n                      defaultExpanded\n                      tabIndex={\n                        getBatchActionProps().shouldShowBatchActions ? -1 : 0\n                      }\n                      onChange={(e) => onInputChange(e)}\n                    />\n                    <Button\n                      tabIndex={\n                        getBatchActionProps().shouldShowBatchActions ? -1 : 0\n                      }\n                      onClick={(e) => setOpen(true)}\n                      size=\"small\"\n                      kind=\"primary\"\n                    >\n                      <div className=\"addButton\"> Add new</div>\n                    </Button>\n                  </TableToolbarContent>\n                </TableToolbar>\n                <Table {...getTableProps()}>\n                  <TableHead>\n                    <TableRow>\n                      <TableSelectAll {...getSelectionProps()} />\n                      {headers.map((header) => (\n                        <TableHeader {...getHeaderProps({ header })}>\n                          {header.header}\n                        </TableHeader>\n                      ))}\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {rows.map((row) => (\n                      <TableRow {...getRowProps({ row })}>\n                        <TableSelectRow {...getSelectionProps({ row })} />\n                        {row.cells.map((cell) => (\n                          <TableCell className=\"table-cell\" key={cell.id}>\n                            {cell.value}\n                          </TableCell>\n                        ))}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            )}\n          </DataTable>\n\n          <ComposedModal\n            open={open}\n            onClose={() => setOpen(false)}\n            size=\"sm\"\n            passiveModal\n          >\n            <ModalHeader>Enter the Details</ModalHeader>\n            <ModalBody>\n              <Form className=\"modal-form\" onSubmit={handleOnRowAdd}>\n                <TextInput\n                  required\n                  className=\"text-input\"\n                  type=\"text\"\n                  labelText=\"Name\"\n                  placeholder=\"name\"\n                  value={firstName}\n                  onChange={(e) => setFirstName(e.target.value)}\n                />\n                <TextInput\n                  required\n                  className=\"text-input\"\n                  type=\"email\"\n                  labelText=\"Email\"\n                  placeholder=\"Email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n                <TextInput\n                  required\n                  className=\"text-input\"\n                  type=\"text\"\n                  labelText=\"Phone Number\"\n                  placeholder=\"phone number\"\n                  value={phone}\n                  onChange={(e) => setPhone(e.target.value)}\n                />\n                <TextInput\n                  required\n                  className=\"text-input\"\n                  type=\"text\"\n                  labelText=\"City\"\n                  placeholder=\"city\"\n                  value={city}\n                  onChange={(e) => setCity(e.target.value)}\n                />\n                <TextInput\n                  required\n                  className=\"text-input\"\n                  type=\"text\"\n                  labelText=\"Country\"\n                  placeholder=\"country\"\n                  value={country}\n                  onChange={(e) => setCountry(e.target.value)}\n                />\n                <Button className=\"submit-button\" type=\"submit\">\n                  Add Details\n                </Button>\n              </Form>\n            </ModalBody>\n          </ComposedModal>\n        </div>\n      ) : (\n        <Loading small />\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;\n","/home/niteesh/Desktop/xopa/src/Signin.js",["44"],"import React, { useState, useEffect } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport { Button, Form, TextInput } from \"carbon-components-react\";\nimport userIcon from \"./user.png\";\nimport \"./Signin.scss\";\n\nfunction Signin(props) {\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [userPassword, setUserPassword] = useState(\"\");\n  const { loggedIn, setLoggedIn } = props;\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n\n    if (token) {\n      setLoggedIn(true);\n    }\n  }, []);\n\n  const handleSubmitForm = (event) => {\n    event.preventDefault();\n    const USERS = localStorage.getItem(\"users\")\n      ? JSON.parse(localStorage.getItem(\"users\"))\n      : [];\n\n    const userInfo = USERS.filter((user) => user.email === userEmail);\n\n    if (userInfo.length === 1) {\n      if (userInfo[0].email === userEmail) {\n        if (userInfo[0].password === userPassword) {\n          localStorage.setItem(\"token\", \"asdadaklwlkdsfaksdf\");\n          setLoggedIn(true);\n          localStorage.setItem(\"currentUser\", userEmail); // Success\n        } else {\n          window.alert(\"Incorrect password\"); // Incorrect password\n        }\n      } else {\n        window.alert(\"incorrect email\"); // Incorrect email\n      }\n    }\n  };\n\n  return !loggedIn ? (\n    <div>\n      <Form className=\"login-form\" onSubmit={handleSubmitForm}>\n        <img src={userIcon} className=\"avatar\" alt=\"avatar\" />\n        <h1 className=\"signInHeader\">Sign In</h1>\n        <TextInput\n          className=\"text-input\"\n          type=\"email\"\n          labelText=\"Email\"\n          placeholder=\"Email\"\n          value={userEmail}\n          onChange={(e) => setUserEmail(e.target.value)}\n        />\n\n        <TextInput\n          className=\"text-input\"\n          type=\"password\"\n          required\n          labelText=\"Password\"\n          placeholder=\"Password\"\n          value={userPassword}\n          onChange={(e) => setUserPassword(e.target.value)}\n        />\n        <Button className=\"submit-button\" type=\"submit\">\n          Sign In\n        </Button>\n\n        <Link className=\"signup-link\" to=\"/register\">\n          Sign Up\n        </Link>\n      </Form>\n    </div>\n  ) : (\n    <Redirect to=\"/dashboard\" />\n  );\n}\n\nexport default Signin;\n",["45","46"],"/home/niteesh/Desktop/xopa/src/Register.js",["47"],"/home/niteesh/Desktop/xopa/src/PrivateRoute.js",["48"],"import React, { useEffect } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nfunction PrivateRoute({ component: Component, movies, ...rest }) {\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    const { setLoggedIn } = rest;\n\n    if (token) {\n      setLoggedIn(true);\n    }\n  }, []);\n\n  const { loggedIn } = rest;\n\n  return loggedIn ? (\n    <Route\n      {...rest}\n      render={(props) => <Component {...props} {...rest} movies={movies} />}\n    />\n  ) : (\n    <Redirect to=\"/\" />\n  );\n}\n\nexport default PrivateRoute;\n",["49","50"],"/home/niteesh/Desktop/xopa/src/App.js",[],["51","52"],"/home/niteesh/Desktop/xopa/src/index.js",[],"/home/niteesh/Desktop/xopa/src/Information.js",["53","54"],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":57,"column":19,"nodeType":"61","messageId":"62","endLine":57,"endColumn":29},{"ruleId":"63","severity":1,"message":"64","line":18,"column":6,"nodeType":"65","endLine":18,"endColumn":8,"suggestions":"66"},{"ruleId":"55","replacedBy":"67"},{"ruleId":"57","replacedBy":"68"},{"ruleId":"63","severity":1,"message":"69","line":24,"column":6,"nodeType":"65","endLine":24,"endColumn":22,"suggestions":"70"},{"ruleId":"63","severity":1,"message":"71","line":12,"column":6,"nodeType":"65","endLine":12,"endColumn":8,"suggestions":"72"},{"ruleId":"55","replacedBy":"73"},{"ruleId":"57","replacedBy":"74"},{"ruleId":"55","replacedBy":"75"},{"ruleId":"57","replacedBy":"76"},{"ruleId":"59","severity":1,"message":"77","line":1,"column":8,"nodeType":"61","messageId":"62","endLine":1,"endColumn":13},{"ruleId":"59","severity":1,"message":"78","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":26},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'setHeaders' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setLoggedIn'. Either include it or remove the dependency array.","ArrayExpression",["81"],["79"],["80"],"React Hook useEffect has a missing dependency: 'redirect'. Either include it or remove the dependency array.",["82"],"React Hook useEffect has a missing dependency: 'rest'. Either include it or remove the dependency array.",["83"],["79"],["80"],["79"],["80"],"'react' is defined but never used.","'Component' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},"Update the dependencies array to be: [setLoggedIn]",{"range":"90","text":"91"},"Update the dependencies array to be: [users, history, redirect]",{"range":"92","text":"93"},"Update the dependencies array to be: [rest]",{"range":"94","text":"95"},[528,530],"[setLoggedIn]",[732,748],"[users, history, redirect]",[319,321],"[rest]"]